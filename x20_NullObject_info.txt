
    Паттерн 20: ПУСТОЙОБЪЕКТ:
-----------------------------
    --  Описание паттерна:
    ----------------------
    не уметь чтото делать это тоже умение

    Логика паттерна очень простая
    для того чтобы избежать постоянных проверок
    на != null до использования объекта
    вводится просто пустой объект.

    Как он вводится это вообще второй вопрос,
    например, можно следовать обычному конструктору
    и сделать так:
    ObjectName(null) <- создает nullObject от типа
    а
    NullObjectName extends ObjectName <- создает объект такого же типа, но без
    возможностей что либо сделать.

    По сути вводится объект который
    буквально делает ничего
    но при этом не требует проверки на null
    то есть может принимать вызовы
    (что очень характерно для DependencyInjection)

    --  Ситуация создающая проблему:
    --------------------------------
    Есть объект с элементом DependencyInjection
    и паттерном Стратегия,
    который реализует навык Летать.
    То есть он в принципе есть в объекте.
    однако есть объект который летать не может.
    То есть технически стратегию назначить невозможно.

    При этом от этого объекта вызываются
    методы внутри класса.

    --  Предлагаемое решение:
    -------------------------
    Делаем объект NullFlyStrategy
    и назначаем его объекту
    внутри объекта не происходит буквально
    ничего.

    то есть вызов flyStrategy.fly() - просто сделает возврат
    и ничего не произойдет.

    --  Итоговый вариант кода:
    --------------------------
    interface FlyStrategy
    {
        void fly();
    }
    class FlyStrategyFast implements FlyStrategy
    {
        @Override
        public void fly(){System.out.println("Fly fast");}
    }
    class FlyStrategySlow implements FlyStrategy
    {
        @Override
        public void fly(){System.out.println("Fly slow");}
    }
    class FlyStrategyNull implements FlyStrategy
    {
        @Override
        public void fly(){return;}              <- буквально ничего не происходит
    }

    class Mob
    {
        FlyStrategy flyStrategy;
        Mob(FlyStrategy flyStrategy){this.flyStrategy = flyStrategy;}
        void fly(){flyStrategy.fly();}          <- надо чтото вызывать, или проверяться на null
    }
