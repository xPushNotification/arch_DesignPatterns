
    Паттерн 09: ФАСАД
---------------------
    --  Описание паттерна:
    ----------------------
    Единый интерфейс к группе интерфейсов подсистемы.
    Определяет высокоуровневый интерфейс, делая систему
    проще для использования.

    Паттерн связан с "Law of Demeter" (principle of least knowledge)
    или принципа того что объект должен общаться лишь
    с ближайшим ОДНИМ объектом - а не прыгать
    и контролировать то что происходит в объектах объектов
    которые создает тот объект с которым происходит общение

    Рука использует ручку
    ручка использует чернила
    чернила ложаться на бумагу
    (рука не контролирует чернила, а контролирует ручку)

    Как видно правильная связь требует
    достаточно много связываний
        чернила - с - бумагой
        чернила - с - ручкою
        ручка - с - рукою
    выглядит сложно даже для очевидного сценария.

    Фасад делает же чтото вроде:
    писатьРукоюСРучкойНаБумагеЧернилами -> результат

    Паттерн применим для библиотек, которые подключают кучу
    объектов - которыми тяжело оперировать отдельно
    (даже не понятно откуда начинать).

    Фасад это надстройка над системой для
    реализации того или иного ТИПОВОГО сценария,
    избегая конфигурирования и глубокого вникания в детали.

    То есть до цели можно дойти:
        01. через фасад просто и по типовому сценарию
        02. через отдельные элементы и сложно, но при этом более гибко

    Типовые сценарии по сути и станут фасадом.

    --  Ситуация создающая проблему:
    --------------------------------
    Есть набор элементов
    в одной библиотеке:
        Сканнер
        Токенайзер
        Список и тд

    что идет за чем сложно понимать
    а вместе они занимаются тем что компилируют программу
    то есть по сути это Компайлер.

    --  Предлагаемое решение:
    -------------------------
    Сценарии оформляются под фасад Компилятор.

    --  Итоговый вариант кода:
    --------------------------
    class AFromLibraryXX    {}
    class BFromLibraryXX    {}
    class CFromLibraryXX    {}

    class LibraryXX             <- если логические части представляют собою решение проблемы
    {}                             решение проблемы (типичный сценарий) проще убрать за фасад
