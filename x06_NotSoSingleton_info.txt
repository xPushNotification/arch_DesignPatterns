
    Паттерн 06: СИНГЛЕТОН И НЕ ТАКОЙ УЖ И СИНГЛЕТОН
---------------------------------------------------
    --  Описание паттерна:
    ----------------------
    (01) Синглетон:
         Гарантирует, что класс имеет только один экземпляр (инстанс)
         и предоставляет глобальную точку доступа к нему.
    (02) НеСовсемСинглетон:
         При наличии ограниченого набора ресурсов предоставляет
         к ним доступ лишь через одну точку доступа,
         существующую в единственном статическом экземпляре,
         которая выдает экземпляры себя в количестве равном
         количеству ограниченных ресурсов.

    --  Ситуация создающая проблему:
    --------------------------------
    Синглетон:
        Существует один файл для ведения лога
        файл всего один - однако работа с логом представляет собою набор методов
        создание второго и третьего класса для работы с логом, при наличии
        одного файла - создает сумятицу.

    НеСовсемСинглетон:
        В классе обладающем ресурсами этих ресурсов становиться больше
        казалось бы можно создать теперь несколько объектов,
        но нет, - ресурсов стало несколько - но все же ограниченное количество
        более того, уже существует синглетон - который работает в системе.

    --  Предлагаемое решение:
    -------------------------
    Создать класс Менеджер ресурсов,
    в нем управлять доступом не к одному ресурсу,а к нескольким
    представленных отдельными синглетонами.

    Выбирать более доступные ресурсы и на них представлять доступ
    к соответствующему синглетону.

    --  Итоговый вариант кода:
    --------------------------
    class NotSoSingleton
    {
        //
        // static fields:
        // -------------------------------------
        // <- можно добавить любое количество "синглетонов" или "ресурсов"
        //    на сути работы метода getInstance() это никак не скажется
        private final static Resource resourceA;
        private final static Resource resourceB;
        private final static NotSoSingleton singletonA = new NotSoSingleton(resourceA);		<- каждый синглетон..
        private final static NotSoSingleton singletonB = new NotSoSingleton(resourceB);		<- ..но с разным ресурсом

        //
        // normal fields:
        // -------------------------------------
        OrderedQueue<String> tasks = new OrderedQueue<>();
        private final Resource resource;
        private NotSoSingleton(Resource resource)
        {
            this.resource = resource;
        }

        // <- теперь и не синглетон и не фабрика, а скорее менеджер ресурсов, доступных лишь через этот класс
        static Instance getInstance()
        {
            if(singletonB.queue.getLength() < singletonA.queue.getLength()) return singletonB;
            return singletonA;
        }
    }
