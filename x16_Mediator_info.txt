
    Паттерн 16: MEDIATOR:
-------------------------
    --  Описание паттерна:
    ----------------------
    Определяет объект,
    инкапскулирующий способ взаимодействия объектов.
    Обеспечивает слабую связь,
    избавляя объекты от необходимости прямо ссылаться
    друг на друга и дает возможность
    независимо изменять их взаимодействие.

    Устраняет дробление контроллера на слишком большом количестве
    мелких элементов, перемещая его в один менеджер,
    где разделенный на объекты сценарий соединяется в один
    большой логически полный сценарий,
    объектам же оставляется лишь возможность слать запросы
    в сторону медиатора, а не друг другу.

    Ну и у нас в сценарии на один объект присоединяется ОДИН медиатор
    хотя очевидно что медиаторов должна быть возможность
    присоединять сколько угодно.
    (в приведенном примере - что мешает аэропорту иметь две диспетчерские башни?)

    --  Ситуация создающая проблему:
    --------------------------------
    (-1-) пример с самолетами:
    --------------------------
    самолеты (объекты)
    летают над (проблема взаимодействия)
    аэропортом (сценарий -- и группа объектов)
    им надо определиться в каком порядке они будут
    садиться.
    они могут это решить коммуницируя друг с другом (контроллер в объекте)
    или коммуницируя через менеджера посредника (медиатора)
    --
    самолет один и тот же, очевидно, может перелетать с
    одного аэропорта на другой (да и могут быть одновременно над двумя аэропортами)
    и очевидно переговариваться каждый раз с другими самолетами ему
    будет не очень выгодно (то есть "проблема взаимодействия" и "сценарий" изменяются)

    (-2-) пример с UI:
    ------------------
    есть элементы управления кнопки (объекты)
    на которые нажимают (проблема взаимодействия)
    которые находятся внутри диалога, где есть куча заполненных полей (сценарий)
    им надо определится в каких полях что находится
    что бы сделать там валидации, и добиться
    выолнения итоговой логики
    они могут сделать это самостоятельно - таким образом прибив
    себя к конкретному сценарию (диалогу)
    или отвязаться от сценария поручая это медиатору (диалогу)
    таким образом получив возможность отвязаться от него.
    (диалог где расположены кнопки может меняться)

    /*
        проблема в том - что это не Dialogue / LoginButton
        это уже отдельные
        DialogueNumberOne / LoginButtonForDialogueNumberOne КАЖДЫЙ РАЗ
        (что возможно иногда не так уж и плохо, но факт остается фактом
        объекты получили слишком жесткую связь - и контроллер
        отвечающий за их взаимодействие СЛИШКОМ сильно раздробился
        среди кучи разных классов)
    */
    class TextBox
    {
        String content;
    }
    class Dialogue              <- объект представлен просто данными
    {
        TextBox userName;
        TextBox password;
        TextBox date;           <-  это поле кнопка логина не использует
    }
    class LoginButton               <- к диалогу где три поля проверяются уже не привяжешь
    {
        TextBox userName;           <- это поле кнопка будет использовать в своем контроллере
        TextBox password;           <- и это поле кнопка тоже будет использовать
        LoginButton(Dialogue attachedDialogue)  <- кнопка должна быть привязана к данным
        {
            this.userName = userName;
            this.password = password;
        }
        void click()                <- контроллер привязан к конкретным данным
        {
            if(userName.content.equals("username"))
            if(password.content.equals("password"))
            {
                System.out.println("ok");
                return;
            }
            System.out.println("failed");
        }
    }

    --  Предлагаемое решение:
    -------------------------
    Сценарий и его логику реализовывать в виде медиатора
    куда от отдельных объектов и слать вызовы.
    Ни в коем случае не размещать куски контроллера в самих объектах
    не привязывая их друг к другу,
    а слать их к менеджеру (медиатору) который и будет их разруливать.

    так как у нас отдельно взятый сценарий это отедьно взятый диалог с кнопками
    мы DialogueName extends Dialogue implements MediatorAbility
    и сделаем медиатором.

    --  Итоговый вариант кода:
    --------------------------
    //
    // Представление медиатора(менеджера):
    // -----------------------------------------------------------
    interface Mediator
    {
        void sendMessage(String message, Object from);
    }

    //
    // Объекты:
    // -----------------------------------------------------------
    abstract class UIElement
    {
        Mediator mediator;
        UIElement(Mediator mediator){this.mediator = mediator;}
    }
    class LoginButton extends UIElement
    {
        LoginButton(Mediator mediator){super(mediator);}
        void click()
        {
            mediator.sendMessage("login button clicked", this);
        }
    }
    class TextField extends UIElement
    {
        String data;
        TextField(Mediator mediator){super(mediator);}
        void setData(String newInput)
        {
            mediator.sendMessage("input field has changed", this);
        }
    }

    //
    // Группировка объектов:
    // -----------------------------------------------------------
    class Dialogue
    {
        //      <- name    <- component
        HashMap<String,    UIElement> components = new HashMap<>();
        void addComponent(String name, UIComponent component)
        {
            components.add(name, component);
        }
    }

    //
    // Контроллер сценария (сценарий у нас привязан к группировке):
    // -----------------------------------------------------------
    class DialogueWithTheLoginButton extends Dialogue implements Mediator
    {
        // <- здесь может быть какое то состояние контроллера-диалога (вроде требований к полям и тому подобное)

        // <- это по сути инициализация сценария/контроллера
        DialogueWithTheLoginButton()
        {
            addComponent("loginField",new TextField(this));             <- элемент привязывается к медиатору
            addComponent("passwordField", new TextField(this));            только медиатор знает взаимодействие
            addComponent("loginButton", new LoginButton(this));            между объектами и что их несколько
        }

        //
        // роутер сообщений от компонентов (взаимодействия):
        @Override
        void sendMessage(String message, Object from)                   <- сообщение от элемента приходит сюда
        {
            // так как объект передается в from мы можем найти его логическое имя (им и будем оперировать):
            String logicalName = null;
            if(components.containsValue(from))
            {for(var key : components.keys()){if(components.get(key) == from){logicalName = key;break;}}}
            else {return;}

            // теперь мы можем оперировать парою: логическое имя + имя сообщения
            if(logicalName.equals("loginButton") && message.equals("login button clicked"))
            {
                onLoginButtonClick();
                return;
            }

            // это не обработанное роутером сообщение:
            System.out.println(message);
        }

        //
        // реакция на сообщения (контроллер взаимодействий):            <- после чего попадает в отдельный контроллер
        void onLoginButtonClick()
        {
            TextField loginField = (TextField)components.get("loginField");
            TextField passwordField = (TextField)components.get("passwordField");

            System.out.println("LoginButton clicked with credentials:");
            System.out.println(loginField.data);
            System.out.println(passwordField.data);
        }
    }





