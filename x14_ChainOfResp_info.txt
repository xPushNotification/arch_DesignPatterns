
    Паттерн 14: CHAIN_OF_RESPONSIBILITY:
----------------------------------------
    --  Описание паттерна:
    ----------------------
    Избегает связывание отправителя запроса
    с его получателем, давая возможность обработать
    запрос более чем одному объекту.
    Связывает объекты получаетели и передает запрос
    по цепочке, пока объект не обработает его.

    Проще говоря делаем испорченный колл центр,
    сначала общаемся с роботом, он не понимает что делать
    передает вперед на колл центр,
    колл центр не получает вообще никакой информации
    повторяем ему, и колл центр шлет тебя на
    менеджера - который уже и отвечает.

    При всей отвратительности для клиента,
    цепочка в итоге сработала,
    а мы можем цеплять таких операторов и точек
    сколько угодно, а они будут просто слать друг на друга
    после того как отработают сами.

    В примере используется просто тест на true/false
    однако там может реально делаться какая то работа с данными
    так например механика hooks имено такой механизм по сути
    то и использует - когда хуки начинают кидать друг другу
    данные по цепочке.

    Логика паттерна совсем не похода на логику "фильтр"
    используемую в спринг при авторизации,
    где просто все кто только можно подключаются последовательно
    к процедуре, чтобы решить системную задачу,
    в "фильтр" проблему решают все в "chain of responsibility"
    проблема передается из рук в руки, пока не решиться.
    однако "cor" очень похода на обработку событий в JS
    с октлючением "back propagation".

    --  Ситуация создающая проблему:
    --------------------------------
    Мы делаем авторизацию, сначала в ней проверяется
    только наличие пользователя, потом добавляется проверка
    его пароля, потом добавляется проверка его роли.

    все эти обработчики добавляются один за другим
    хотя обрабатывают одну процедуру "авторизация"

    плохое решение в данном случае:
    class Database
    {
        boolean isValidUser(String userName)
        boolean isValidPassword(String password)
    }

    --  Предлагаемое решение:
    -------------------------
    использовать хандлеры обработчики
    и запускать обработку по этой цепочке
    при желании подключая новые хандлеры.

    --  Итоговый вариант кода:
    --------------------------
    abstract class Handler
    {
        Handler next;       <- это и будет прикрепленный следующий обработчик
        Handler setNextHandler(Handler next)
        {
            this.next = next;
            return next;
        }   <- это позволит цеплять хандлеры один за другой как .setNextHandler(..).setNextHandler и тд.

        <- это точка входа в цепочку - как только ктото вернет false цепочка оборвется
           и если цепочка сработает целиком то все вернут true
           этот метод переопределится в реальных обработчиках
        abstract boolean handle(String username, String password);

        <- это метод обработки самой цепочки
        boolean handleNext(String userName, String password)
        {
            if(next == null) return true;               <- цепочка закончилась успехом
            return next.handle(userName, password);     <- кто то чтото и вернет
        }
    }
    //
    // - а вот и хандлеры (они как видим полностью независимые друг от друга)
    //   хандлеры должны:
    //   возвратить false - если цепочка должна оборваться
    //   если все хорошо возвратить handleNext - чтобы идти в конец цепочки
    //   если все таки цепочка будет пройдена - if(next == null) вернет true - и мы будем засчитывать
    //   это как полный успех
    //
    class HandlerName extends Handler
    {
        boolean handle(String userName, String password)
        {
            if(!userName.equals("user")){return false;}    <- как видим цепочка сорвется условием false
            return handleNext(userName, password);
        }
    }
    class HandlerPassword extends Handler
    {
        boolean handle(String userName, String password)
        {
            if(!userName.equals("password")) {return false;}
            return handleNext(userName, password);
        }
    }
    //
    // КЛИЕНТ ДЛЯ ЦЕПОЧКИ:
    // - цепляем классы исполнения и создаем цепочку
    //
    class AuthService
    {
        Handler chainRoot;
        AuthService(Handler handler)
        {
            this.handlerRoot = handler;
        }
        boolean isAuthOk(String UserName, String password)
        {
            if(handler.handle(UserName, password)) return true;         <- запуск цепочки
            return false;
        }
    }
    //                        <- цепочку можно было бы начать и с Handler, но он у нас абстрактный
    Handler chainOfHandlers = new HandlerName().setNextHandler(new HandlerPassword());
    AuthService auth = new AuthService(chainOfHandlers);
    System.out.println(auth.isAuthOk("user","password"));        // true
    System.out.println(auth.isAuthOk("user1","password"));       // false
