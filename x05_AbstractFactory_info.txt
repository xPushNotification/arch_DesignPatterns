
    Паттерн 05: АБСТРАКТНАЯ_ФАБРИКА
-----------------------------------
    --  Описание паттерна:
    ----------------------
    (01) Тип абстрактной фабрики от которой наследуются
         конкретные фабрики - позволяющий создать
         конкретную фабрику исходя из нужного сценария.
         Нужная фабрика будет выпускать всегда совместимые
         друг с другом объекты - требуемые сценарием.
    (02) Предоставляет интерфейс (абстрактный класс)
         для создания групп связанных или зависимых объектов,
         не указывая их конкретный класс.

    --  Ситуация создающая проблему:
    --------------------------------
    Существует набор интерфейсных объектов для разных
    видов операционных систем,

    многие из этих объектов не совместимы друг с другом,
    то есть WindowUnix не совместимо с OKButtonWindows
    и так далее.

    Создавая объекты напрямую - мы создаем огромное количество
    ветвлений с выбором вариантов объектов.

    --  Предлагаемое решение:
    -------------------------
    Можно сделать так чтобы выпуском обьектов в одном месте
    управляла фабрика, а вид фабрики при этом выбирался исходя
    из операционной системы (условий использования таких объектов)

    В этом случае все объекты будут гарантированно совместимы
    друг с другом, так как за их выпуск будет отвечать фабрика
    выпускающая только совместимые объекты.

    а интерфейсы сверху - не будут знать какие объекты они используют
    они будут получать
    в Window xeCommonWindow = UIFactory.getWindow() -> oneOf: WindowUnix / WindowLinux / WindowMac
    в Button button = UIFactory.getButton() -> oneOf: ButtonUnix / ButtonLinux / ButtonMac

    То есть помимо фабрик стандартных над ними будет надстройка
    в виде абстрактной фабрики, являющаяся абстрактным классом (или интерфейсом)
    в с помощью которой и будут выбирать какой конкретно фабрикою пользоваться.

    Более простой пример, - темная тема интерфейса и
    светлая тема интерфейса - сама тема в данном случае это и есть
    фабрика, а выбор темы манипуляция созданием конкретики к абстрактное фабрике.
    также становиться понятным как создавать новую тему к уже текущим
    и куда вставлять добавления.

    --  Итоговый вариант кода:
    --------------------------
    interface Window
        void doAsAWindow()
        --
        class WindowLinux implements Window
        class WindowMac implements Window

    interface Button
        void doAsAButton()
        --
        class ButtonLinux implements Button
        class ButtonMac implements Button

    interface UIFactory
        Window createWindow()
        Button createButton()

    class UIFactoryLinux implements UIFactory
        Window createWindow(){return new WindowLinux();}
        Button createButton(){return new ButtonLinux();}

    class UIFactoryMac implements UIFactory
        Window createWindow(){return new WindowMac();}
        Button createButton(){return new ButtonMac();}
