
    Паттерн 07: КОМАНДА
-----------------------
    --  Описание паттерна:
    ----------------------
    (01) Инкапсулирует запрос в виде объекта,
         позволяет передавать их клиентам в качестве параметров,
         ставить в очередь,
         логировать, а также поддерживать отмену операций
    (92) просто выражает связь:
         [ (объектУправления)  <->  (командаУправления) ] <-> (наборКомандУправления) <-> (реализаторКоманд)
         в которой обьектУправления и командаУправления создаются совместно
         а реализаторКоманд не видя объектыУправления
         управляет им присоединяя к себе и реализуя командыУправления
         объединяя их в наборыКомандУправления

    --  Ситуация создающая проблему:
    --------------------------------
    Есть универсальный пульт для управления
    не понятно чем - ни понятно как ни понятно в какой последовательности
    и есть куча вещей в доме которым нужно управление (у нас лампа и телевизор).

    Невозможно спрограммировать то - что не понятно куда направляется
    в виде метода, обращения к полю и тд.

    Возможно также появление дейсвтия в пульте которое подразумевает
    сразу же несколько подряд идущих команд.

    А еще возможно появление другого метода управления
    отличного от пульта.
    -------
    как вариант: элементы уи с привязанными к ним действиями
    элемент кнопка так и есть кнопка - а действие может быть к нему
    привязано совершенно произвольное
    (вариант того какое действие может быть привязано определяется
    наличием того или иного объекта "команда")
    и как вариант цепочки команд в уи:
    взять стиль (набор команд), применить стиль (набор команд)

    --  Предлагаемое решение:
    -------------------------
    Вводится универсальный объект команда
    с методами doExecute / unExecute

    есть команды которые делают на doExecute / unExecute одно и тоже
    например переключение каналов вперед - очвидно второе действие
    не должно канал возвращать назад
    а есть команды которые делают обратное - включают выключают свет

    это все определяется классом команды

        doExecute
            - в случае лампы - метод команды включит свет
            - в случае телевизоора - метод команды включит телевизор
            - в случае телевизора - метод переключит канал вперед
            - в случае телевизора - метод переключит канал назад
        unExecute
            - в случае лампы - метод команды выключит свет
            - в случае телевизора - метод команды выключит телевизор                  (вкл-выкл)
            - в случае телевизора - метод команды ВСЕ РАВНО переключит канал вперед   (инкрементное же действие)
            - в случае телевизора - метод команды ВСЕ РАВНО переключит канал назад

    после того как объекты, их действия и команды определены
    они привязываются к объекту пульта

    --  Итоговый вариант кода:
    --------------------------
    interface ICommand                      <- сама собственно команда
        doExecute()
        unExecute()

    class Invoker                           <- отправляющая сторона (пульт)
        HashMap<StringCommandName,ICommand> commands
        HashMap<StringCommandName,booleanState> commandStates
        --
        Invoker(ICommand[] command)         <- привязка команд к пульту
        --
        doCommand(String commandName)       <- первый вызов doExecute / второй unExecute

    interface IReceiver                     <- интерфейс принимающей стороны (лампочка)
        doAction(String actionName)         <- очевидно лучше бы быть enum - но у нас так для простоты

    Command implements ICommand             <- команда привязана к лампочке (включить,выключить,притушить)
        String commandName;
        --
        IReceiver receiver;
        Command(IReceiver receiver)
        --
        doExecute() -> receiver.doAction("command name")
        unExecute() -> receiver.undoAction("command name")

    Receiver implements IReceiver           <- физически лапмочка / жалюзи с переписаным методом doAction(String name)
        Queue<ICommand> commands            <- у нас её в примере нет, но это фактически тротлер
        --
        doAction(String name)
