
    Паттерн 15: TEMPLATE_METHOD:
--------------------------------
    --  Описание паттерна:
    ----------------------
    Определяет алгоритм,
    некоторые этапа которого делегируются подклассам.
    Позволяет подклассам переопределять эти этапы,
    не меняя структуру алгоритма.

    Паттерн служит на пару с ChainOfResponsibility
    для создания систем хуков в движхках.
    TemplateMethod дает возможность врезки
    ChainOfResponsibility представляет механизм врезки из цепочки методов.

    В этом паттерне используется расширение класса
    для переопределения методов - однако как мы понимаем
    использование ChainOfResponsibility для этого
    более предпочтительный механизм.

    --  Ситуация создающая проблему:
    --------------------------------
    существует процедура загрузки веб страницы
    на котором последовательно проходят
    несколько этапов
    движку CMS требуется дать по факту
    прохождения каждого из этапов
    доступ клиенту к данным этого этапа,
    при этом не разрушая общей логики загрузки.

    --  Предлагаемое решение:
    -------------------------
    использовать врезку методов
    которые будут происходить на разных этапах загрузки

    то есть загрузка будет идти последовательно
    методом "загрузка"
    а внутри будут вызываться некоторые
    методы - переопределять которые
    мы и дадим клиенту.

    загрузка()
        доЗагрузки()
        ...
        доПодключенияКБазеДанных()
        ...
        послеПодключенияКБазеДанных()
        ...
        послеЗагрузки()

    --  Итоговый вариант кода:
    --------------------------
    abstract class Loader
    {
        void beforeLoading(){}          <- не нужен abstract - метод может и не быть переопределен
        void afterLoading(){}
        void beforeDbConnection(){}
        void afterDbConnection(){}
        void load()
        {
            beforeLoading();            <- (!) метод в том числе может и параметром среду получать
            System.out.println("Loading begin..");

            beforeDbConnection();
            System.out.println("Db connection..");
            afterDbConnection();

            System.out.println("Loading end..");
            afterLoading();
        }
    }

    <- проблема в испоьзовании расришения - в том - что клиент
       а. не может добавить несколько последовательно хуков
       б. вынужден хранить класс расширения у себя в коде (хотя ему нужно переопределить метод)
    class LoaderWithExtension extends Loader
    {
        @Override
        void beforeLoading()
        {
            System.out.println("Before loading hooked..");
        }
    }
