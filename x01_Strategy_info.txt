
    Паттерн 01: СТРАТЕГИЯ
-------------------------
    --  Описание паттерна:
    ----------------------
        (01) использование композиции вместо наследования
             (всего один уровень объектов)
        (02) наследование плохо подходит для переиспользования кода
             присоединяемые через интерфейсы реализации - отлично
        (03) семейство алгоритмов, инкапсулированных друг от друга,
             и имеющих возможность заменять друг друга,
             стретегия хранит алгоритмы отдельно от клиента,
             который их использует

    --  Ситуация создающая проблему:
    --------------------------------
        Утка
            методЛетать(){летает}
            УткаРезиновая наследует Утка
                методЛетать(){неУмеетЛетать}    <- одинаковое поведение
            УткаВТире наследует Утка
                методЛетать(){неУмеетЛетать}    <- одинаковое поведение

        наследование создало такую ситуацию,
        когда два объекта имеют одинаковое поведение
        но при этом логически разделены, проблему можно решить лишь
        дублированием кода
        новые же типы объектов - вроде Голубь:неУмеетЛетать
        создать будет и вовсе невозможно

    --  Предлагаемое решение:
    -------------------------
        1. оставить только один вид объекта Утка
        2. деривативы уток характеризовать не именами классов,
           а наличием тех или иных свойств (способностей)

    --  Итоговый вариант кода в судо:
    ---------------------------------

        ИнтерфейсЛетать
        ИнтерфейсКрякать

        РеализацияИнтерфейсаЛетатьСтандартно реализует ИнтерфейсЛетать
        РеализацияИнтерфейсаЛетатьНеУметь реализует ИнтерфейсКрякать

        РеализацияИнтерфейсаКрякатьСтандартно реализует интерфейсКрякать
        РеализацияИнтерфейсаКрякатьНеУметь реализует интерфейсКрякать

        Утка реализует ИнтерфейсЛетать, ИнтерфейсКрякать
            ИнтерфейсЛетать присоединяемаяРеализацияЛетать
            ИнтерфейсКрякать присоединяемаяРеализацияКрякать

            конструкторУтка(ИнтерфейсЛетать реализацияЛетать, ИнтерфейсКрякать реализацияКрякать)
            {
                присоединяемаяРеализацияЛетать = реализацияЛетать
                присоединяемаяРеализацияКрякать = реализацияКрякать
            }
            методЛетать()
            {
                присоединяемаяРеализацияЛетать.летать()
            }
            методКрякать()
            {
                присоединяемаяРеализацияКрякать.крякать()
            }

        <- отдельный вид утки задается не классом - а конфигурацией

        резиноваяУтка = new Утка(
                                new реализацияИнтерфейсаЛетатьНеУметь(),
                                new РеализацияИнтерфейсаКрякатьНеУметь()
                                )
        обычнаяУтка = new Утка(
                                new РеализацияИнтерфейсаЛетатьСтандартно(),
                                new РеализацияИнтерфейсаКрякатьСтандартно()
                                )
